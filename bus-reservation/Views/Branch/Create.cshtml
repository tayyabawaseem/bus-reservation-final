@model bus_reservation.Models.Branch

@{
    ViewData["Title"] = "Add Branch";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
    var errorzipcode = ViewBag.zipcode;
    var errorcontact1 = ViewBag.contact1;
    var errorcontact2 = ViewBag.contact2;
    var erroraddress = ViewBag.address;
}
<div class="container-fluid pt-4 px-4 bg-dark">

    <h1 style="color:gray; font-weight:bolder">Add Branch</h1>

    <hr />
    <div class="row g-4">
        <div class="rounded h-100 p-4 bg-dark" >
            <form asp-action="Create" onsubmit="return validateForm()">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                @* <p class="badge " style="background: #FF5733;">Branch Code will be Generate Automatically.</p> *@
                <div class="col-sm-12 col-xl-12 mb-3">

                    <div class="form-group">
                        <label asp-for="Address" class="control-label"></label>
                        <input asp-for="Address" class="form-control" placeholder="Enter Valid Address" required />
                        @if (erroraddress != null)
                        {
                            <span asp-validation-for="Address" class="text-danger">@erroraddress</span>
                        }
                        <span id="addressError" asp-validation-for="Address" class="text-danger"></span>
                    </div>
                </div>

                <div class="col-sm-12 col-xl-12 mb-3">
                    <div class="row g-4">
                        <div class="col-sm-12 col-md-6">
                            <div class="form-group">
                                <label asp-for="City" class="control-label"></label>
                                <input asp-for="City" class="form-control" oninput="validateCityState(this, 'cityError')" placeholder="Enter Valid City" required />
                                <span id="cityError" asp-validation-for="City" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6">
                            <div class="form-group">
                                <label asp-for="State" class="control-label"></label>
                                <input asp-for="State" class="form-control" oninput="validateCityState(this, 'stateError')" placeholder="Enter Valid State" required />
                                <span id="stateError" asp-validation-for="State" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 col-xl-12 mb-3">
                    <div class="row g-4">
                        <div class="col-sm-12 col-md-6">
                            <div class="form-group">
                                <label asp-for="ZipCode" class="control-label"></label>
                                <input asp-for="ZipCode" class="form-control" oninput="validateZipCode(this)" placeholder="Enter Valid State. e.g. 75057" required />
                                @if (errorzipcode != null)
                                {
                                    <span asp-validation-for="ZipCode" class="text-danger">@errorzipcode</span>
                                }
                                <span id="zipCodeError" asp-validation-for="ZipCode" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6">
                            <div class="form-group">
                                <label asp-for="Contact" class="control-label"></label>
                                <input asp-for="Contact" class="form-control" oninput="validateContact(this)" placeholder="Enter Valid Contact No. e.g. 03347865786" required />
                                @if (errorcontact1 != null)
                                {
                                    <span asp-validation-for="Contact" class="text-danger">@errorcontact1</span>
                                }
                                else if (errorcontact2 != null)
                                {
                                    <span asp-validation-for="Contact" class="text-danger">@errorcontact2</span>
                                }
                                <span id="contactError" asp-validation-for="Contact" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-xl-12 mt-4 mb-2">
                    <div class="form-group">
                        <input type="submit" value="Add Branch" class="btn btn-outline-success w-100" style="background-color: transparent;font-weight:bolder; color: white; border-radius:10px; border: 3px solid #FF5733; width: 100%; padding: 8px 12px; cursor: pointer; transition: 0.3s;"
                               onmouseover="this.style.backgroundColor='#FF5733'; this.style.color='Whitesmoke';"
                               onmouseout="this.style.backgroundColor='transparent'; this.style.color='Whitesmoke';" />
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="mt-3">
        <a class="btn btn-outline-success" asp-action="Index" style="background-color: dimgrey;font-weight:bolder; color: whitesmoke; border-radius:10px; border: 3px solid; padding: 8px 12px; cursor: pointer; transition: 0.3s;"
           onmouseover="this.style.backgroundColor='#FF5733'; this.style.color='Whitesmoke';"
           onmouseout="this.style.backgroundColor='dimgrey'; this.style.color='Whitesmoke';">Back to List</a> <br /> <br />
    </div>
</div>

<script>
    function validateCityState(input, errorId) {
        const regex = /^[A-Za-z\s]*$/;
        const errorSpan = document.getElementById(errorId);
        if (!regex.test(input.value)) {
            errorSpan.textContent = "City and State must consist of only letters and spaces.";
            input.setCustomValidity("Invalid input");
        } else {
            errorSpan.textContent = "";
            input.setCustomValidity("");
        }
    }

    function validateZipCode(input) {
        const regex = /^\d{5}$/;
        const errorSpan = document.getElementById('zipCodeError');
        if (!regex.test(input.value)) {
            errorSpan.textContent = "Zip Code must be a 5-digit number.";
            input.setCustomValidity("Invalid input");
        } else {
            errorSpan.textContent = "";
            input.setCustomValidity("");
        }
    }

    function validateContact(input) {
        const regex = /^0\d{10}$/;
        const errorSpan = document.getElementById('contactError');
        if (!regex.test(input.value)) {
            errorSpan.textContent = "Contact must start with '0' and be exactly 11 digits.";
            input.setCustomValidity("Invalid input");
        } else {
            errorSpan.textContent = "";
            input.setCustomValidity("");
        }
    }

    function validateForm() {
        const inputs = document.querySelectorAll('input');
        let isValid = true;

        inputs.forEach(input => {
            if (!input.checkValidity()) {
                isValid = false;
                input.reportValidity();
            }
        });

        return isValid;
    }
</script>
